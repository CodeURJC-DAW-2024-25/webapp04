openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/v1/profiles:
    put:
      tags:
      - profile-rest-controller
      summary: Update user profile information
      operationId: updateProfile
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: address
        in: query
        required: true
        schema:
          type: string
      - name: newPass
        in: query
        required: true
        schema:
          type: string
      - name: repeatPass
        in: query
        required: true
        schema:
          type: string
      - name: iframe
        in: query
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                profilePicInput:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products/{id}:
    get:
      tags:
      - product-rest-controller
      summary: Retrieve a product by its ID
      operationId: getProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
    put:
      tags:
      - product-rest-controller
      summary: Update product by its ID
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: newProductDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/NewProductDTO"
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
    delete:
      tags:
      - product-rest-controller
      summary: Delete product by ID
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
  /api/v1/users/{userId}/reviews:
    get:
      tags:
      - review-report-rest-controller
      summary: Retrieve reviews recieved by a user by user ID
      operationId: getReviews
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReviewDTO"
    post:
      tags:
      - review-report-rest-controller
      summary: Create (post) a review for the user indicated by user ID
      operationId: postReview
      parameters:
      - name: reviewDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/NewReviewDTO"
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
  /api/v1/users/signin:
    post:
      tags:
      - user-rest-controller
      summary: Create new user
      operationId: createUser
      parameters:
      - name: user
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/NewUserDTO"
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/reports/products/{productId}:
    post:
      tags:
      - review-report-rest-controller
      summary: Crate (post) a report to the product indicated by product ID
      operationId: postReport
      parameters:
      - name: reportDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/NewReportDTO"
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReportDTO"
  /api/v1/products:
    get:
      tags:
      - product-rest-controller
      summary: Retrieve a list of products
      operationId: getAllProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      - name: name
        in: query
        required: false
        schema:
          type: string
      - name: category
        in: query
        required: false
        schema:
          type: string
      - name: recommended
        in: query
        required: false
        schema:
          type: boolean
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageProductDTO"
    post:
      tags:
      - product-rest-controller
      summary: Create a new product
      operationId: createProduct
      parameters:
      - name: productDTO
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/NewProductDTO"
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProductDTO"
  /api/v1/products/{id}/images:
    post:
      tags:
      - product-rest-controller
      summary: Add image to a product by product ID
      operationId: addImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
              - image
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
  /api/v1/products/{id}/favorites:
    post:
      tags:
      - product-rest-controller
      summary: Toggle a product as favorite by its ID
      operationId: toggleFavoriteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageProductDTO"
  /api/v1/chats/{productId}:
    post:
      tags:
      - chat-rest-controller
      summary: Create a new chat by the product ID
      operationId: createChat
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatDTO"
  /api/v1/chats/{id}/productSale:
    post:
      tags:
      - chat-rest-controller
      summary: Mark a product as sold in a chat by its ID
      operationId: sellProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/chats/{id}/messageDelivery:
    post:
      tags:
      - chat-rest-controller
      summary: Send a message in a chat by its ID
      operationId: sendMessage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: message
        in: query
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/auth/refresh:
    post:
      tags:
      - rest-login-controller
      summary: Refresh authentication token
      operationId: refreshToken
      parameters:
      - name: RefreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/auth/logout:
    post:
      tags:
      - rest-login-controller
      summary: Log out of an account
      operationId: logOut
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/auth/login:
    post:
      tags:
      - rest-login-controller
      summary: Log in to an account
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthResponse"
  /api/v1/users:
    get:
      tags:
      - user-rest-controller
      summary: Retrieve a list of all users
      operationId: getAllUsers
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
  /api/v1/users/{userId}:
    get:
      tags:
      - user-rest-controller
      summary: Retrieve user by its ID
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/users/me:
    get:
      tags:
      - user-rest-controller
      summary: Retrieve details of the authenticated user
      operationId: getAuthenticatedUser
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/reviews/{reviewId}:
    get:
      tags:
      - review-report-rest-controller
      summary: Retrieve a review by its ID
      operationId: getReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReviewDTO"
    delete:
      tags:
      - review-report-rest-controller
      summary: Delete review by its ID
      operationId: deleteReview
      parameters:
      - name: reviewId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/reports:
    get:
      tags:
      - review-report-rest-controller
      summary: Retrieve a list of all reports
      operationId: getReports
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportDTO"
  /api/v1/profiles/stats:
    get:
      tags:
      - profile-rest-controller
      summary: Retrieve user's purchases and sales statistics
      operationId: stats
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/profiles/image/{id}:
    get:
      tags:
      - profile-rest-controller
      summary: Retrieve a user image by user ID
      operationId: getProfileImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products/sales:
    get:
      tags:
      - product-rest-controller
      summary: Retrieve last sales of the user
      operationId: getLastSales
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDTO"
  /api/v1/products/purchases:
    get:
      tags:
      - product-rest-controller
      summary: Retrieve last purchases of the user
      operationId: getLastPurchases
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDTO"
  /api/v1/products/favorites:
    get:
      tags:
      - product-rest-controller
      summary: Retrieve a list of favorite products of the authenticated user
      operationId: getFavoriteProducts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 8
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageProductDTO"
  /api/v1/chats:
    get:
      tags:
      - chat-rest-controller
      summary: Retrieve a list of all chats of the authenticated user
      operationId: getUserChats
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChatDTO"
  /api/v1/chats/{id}:
    get:
      tags:
      - chat-rest-controller
      summary: Retrieve a chat by ID
      operationId: getChat
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ChatDTO"
  /api/v1/reports/{reportId}:
    delete:
      tags:
      - review-report-rest-controller
      summary: Delete report by its ID
      operationId: deleteReport
      parameters:
      - name: reportId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/profiles/{id}:
    delete:
      tags:
      - profile-rest-controller
      summary: Delete a user by its ID
      operationId: deleteAccount
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/v1/products/{productId}/images/{imageId}:
    delete:
      tags:
      - product-rest-controller
      summary: Delete image of a product by product ID and image ID
      operationId: removeImage
      parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: imageId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
components:
  schemas:
    NewProductDTO:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        description:
          type: string
        imageUpload:
          type: array
          items:
            type: string
            format: binary
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        description:
          type: string
        owner:
          $ref: "#/components/schemas/UserBasicDTO"
        imageUrls:
          type: array
          items:
            type: string
        thumbnail:
          type: string
        sold:
          type: boolean
        publishDate:
          type: string
          format: date
    UserBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        image:
          type: string
        hasImage:
          type: boolean
    NewReviewDTO:
      type: object
      properties:
        rating:
          type: integer
          format: int32
        description:
          type: string
        reviewedUserId:
          type: integer
          format: int64
    ReviewDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        reviewOwner:
          $ref: "#/components/schemas/UserBasicDTO"
        reviewedUser:
          $ref: "#/components/schemas/UserBasicDTO"
        rating:
          type: integer
          format: int32
    NewUserDTO:
      type: object
      properties:
        mail:
          type: string
        name:
          type: string
        password:
          type: string
        repeatPassword:
          type: string
    NewReportDTO:
      type: object
      properties:
        reason:
          type: string
        description:
          type: string
        productId:
          type: integer
          format: int64
        reportCreatorId:
          type: integer
          format: int64
    ProductBasicDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
        sold:
          type: boolean
        publishDate:
          type: string
          format: date
    ReportDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reason:
          type: string
        description:
          type: string
        product:
          $ref: "#/components/schemas/ProductBasicDTO"
        reportCreator:
          $ref: "#/components/schemas/UserBasicDTO"
    PageProductDTO:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProductDTO"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    ChatDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/ProductBasicDTO"
        userBuyer:
          $ref: "#/components/schemas/UserBasicDTO"
        userSeller:
          $ref: "#/components/schemas/UserBasicDTO"
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageDTO"
        selling:
          type: boolean
    MessageDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sender:
          $ref: "#/components/schemas/UserBasicDTO"
        message:
          type: string
        sentAt:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PurchaseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/ProductBasicDTO"
        buyer:
          $ref: "#/components/schemas/UserBasicDTO"
        seller:
          $ref: "#/components/schemas/UserBasicDTO"
        purchaseDate:
          type: string
          format: date
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        creationYear:
          type: integer
          format: int32
        roles:
          type: array
          items:
            type: string
        products:
          type: array
          items:
            $ref: "#/components/schemas/ProductBasicDTO"
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/ReviewDTO"
        sales:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseDTO"
        purchases:
          type: array
          items:
            $ref: "#/components/schemas/PurchaseDTO"
        iframe:
          type: string
        image:
          type: string
        hasImage:
          type: boolean
